--// Service References
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")

--// Get Local Player Info Safely
local player = Players.LocalPlayer
local username = player and player.Name or "Unknown"
local displayName = player and player.DisplayName or "Unknown"
local userId = player and player.UserId or 0
local placeId = game.PlaceId or 0

--// Get Game Name Safely
local gameName = "Unknown Game"
local success, gameInfo = pcall(function()
	return MarketplaceService:GetProductInfo(placeId)
end)
if success and gameInfo and typeof(gameInfo) == "table" and typeof(gameInfo.Name) == "string" then
	gameName = gameInfo.Name
	if #gameName > 100 then
		gameName = string.sub(gameName, 1, 100) .. "..."
	end
end

--// Get Vietnam Time
local function getVietnamTime()
	local t = os.time() + 7 * 60 * 60
	return os.date("%d/%m/%Y | %H:%M:%S", t)
end
local timeExecuted = getVietnamTime()
local timestampISO = os.date("!%Y-%m-%dT%H:%M:%SZ")  -- UTC ISO format for Discord

--// Detect Executor
local executor = "Unknown"
local successExec, execName = pcall(function()
	return identifyexecutor and identifyexecutor() or "Unknown"
end)
if successExec and execName then
	executor = execName
end

--// Construct Embed Payload (markdown text style)
local embed = {
	title = "idk hub Executed",
	description = string.format(
		"Username: `%s`\nDisplayName: `%s`\nUserId: `%d`\nPlaceId: `%d`\nGame: `%s`\nExecutor: `%s`",
		username, displayName, userId, placeId, gameName, executor
	),
	color = 16711680, -- Red
	footer = {
		text = "Time Executed: " .. timeExecuted
	},
	timestamp = timestampISO
}

local payload = {
	content = nil,
	embeds = {embed}
}

--// Send Webhook
local requestFunc = (syn and syn.request) or (http and http.request) or request or http_request
if requestFunc then
	pcall(function()
		requestFunc({
			Url = webhook,
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json"
			},
			Body = HttpService:JSONEncode(payload)
		})
	end)
else
	warn("error")
end
